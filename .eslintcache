[{"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/index.js":"1","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reportWebVitals.js":"2","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/App.js":"3","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SignUp.js":"4","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/index.js":"5","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Login.js":"6","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/MapContainer.js":"7","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NavBar.js":"8","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/Profile.js":"9","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/UserReducer.js":"10","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/types.js":"11","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/UserActions.js":"12","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditProfile.js":"13","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SubmitButton.js":"14","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/helpers/index.js":"15","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Trips.js":"16","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NewTripForm.js":"17","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/constants/index.js":"18","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/TripActions.js":"19","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/TripReducer.js":"20","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripDetails.js":"21","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripLeg.js":"22","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/LegForm.js":"23","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/MapReducer.js":"24","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/MapActions.js":"25","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditTripForm.js":"26","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/DeleteAlert.js":"27","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/AsyncSearchBar.js":"28"},{"size":846,"mtime":1610729416529,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1610581828347,"results":"31","hashOfConfig":"30"},{"size":846,"mtime":1611333773696,"results":"32","hashOfConfig":"30"},{"size":4311,"mtime":1611329582935,"results":"33","hashOfConfig":"30"},{"size":244,"mtime":1611157368250,"results":"34","hashOfConfig":"30"},{"size":2830,"mtime":1611337766453,"results":"35","hashOfConfig":"30"},{"size":8268,"mtime":1611333850671,"results":"36","hashOfConfig":"30"},{"size":3055,"mtime":1611446573731,"results":"37","hashOfConfig":"30"},{"size":1751,"mtime":1611447290489,"results":"38","hashOfConfig":"30"},{"size":651,"mtime":1611266161280,"results":"39","hashOfConfig":"30"},{"size":662,"mtime":1611443208615,"results":"40","hashOfConfig":"30"},{"size":2954,"mtime":1611265849064,"results":"41","hashOfConfig":"30"},{"size":4165,"mtime":1611271674492,"results":"42","hashOfConfig":"30"},{"size":732,"mtime":1610754962437,"results":"43","hashOfConfig":"30"},{"size":667,"mtime":1610849104924,"results":"44","hashOfConfig":"30"},{"size":2486,"mtime":1611201655016,"results":"45","hashOfConfig":"30"},{"size":3522,"mtime":1611357705299,"results":"46","hashOfConfig":"30"},{"size":212,"mtime":1611119002849,"results":"47","hashOfConfig":"30"},{"size":5677,"mtime":1611445838099,"results":"48","hashOfConfig":"30"},{"size":2553,"mtime":1611445919566,"results":"49","hashOfConfig":"30"},{"size":3450,"mtime":1611272045690,"results":"50","hashOfConfig":"30"},{"size":506,"mtime":1611428032858,"results":"51","hashOfConfig":"30"},{"size":3331,"mtime":1611257558524,"results":"52","hashOfConfig":"30"},{"size":455,"mtime":1611158213116,"results":"53","hashOfConfig":"30"},{"size":257,"mtime":1611158377998,"results":"54","hashOfConfig":"30"},{"size":3976,"mtime":1611203085149,"results":"55","hashOfConfig":"30"},{"size":696,"mtime":1611443323328,"results":"56","hashOfConfig":"30"},{"size":1132,"mtime":1611356953826,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"13aw72n",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/index.js",[],["119","120"],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reportWebVitals.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/App.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SignUp.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Login.js",["121"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Col, Row, Container, Form, Card, Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { signIn } from \"../actions/UserActions\";\nimport SubmitButton from \"./SubmitButton\";\n\nconst Login = ({ signIn, user, fetching, error }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  let history = useHistory();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    signIn(username, password);\n  };\n\n  useEffect(() => {\n    if (user.id) {\n      history.push(\"/profile\");\n    }\n  });\n\n  const inputClass = error ? \"is-invalid\" : \"\";\n  return (\n    <section>\n      <Container className=\"min-vh-100\">\n        <Row className=\" min-vh-100\">\n          <Col\n            id=\"login\"\n            md={{ span: 6, offset: 0 }}\n            style={{ marginTop: \"40px\" }}\n          >\n            {\" \"}\n            <Card>\n              <Card.Img\n                src={process.env.PUBLIC_URL + \"images/sajama.jpg\"}\n                alt=\"Nevada Sajama\"\n              />\n            </Card>{\" \"}\n          </Col>\n          <Col md={{ span: 4, offset: 1 }} style={{ marginTop: \"40px\" }}>\n            <Card>\n              <Card.Body>\n                <Form onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"formBasicUsername\">\n                    <Form.Label className=\"form-label\">Username</Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"text\"\n                      name=\"username\"\n                      placeholder=\"UserName\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                    <div className=\"invalid-feedback\">{error}</div>\n                  </Form.Group>\n\n                  <SubmitButton fetching={fetching} btnTxt={\"Log In\"} />\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.UserReducer.user,\n    fetching: state.UserReducer.fetching,\n    error: state.UserReducer.error,\n  };\n};\n\nexport default connect(mapStateToProps, { signIn })(Login);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/MapContainer.js",["122","123"],"import React, { useRef, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport L, { latLngBounds } from \"leaflet\";\nimport { TileLayer, Map, FeatureGroup, LayersControl } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport { addLeg, getTrip, editLeg, deleteLeg } from \"../actions/TripActions\";\nimport { togglePane, openPane } from \"../actions/MapActions\";\nimport TripLeg from \"../components/TripLeg\";\nimport LegForm from \"..//components/LegForm\";\n\nconst MapContainer = ({\n  trip,\n  pane,\n  selectedLeg,\n  user,\n  addLeg,\n  getTrip,\n  editLeg,\n  deleteLeg,\n  togglePane,\n  openPane,\n}) => {\n  // initialize ref to edit controls\n  const editRef = useRef();\n  const mapRef = useRef();\n  const centerRef = useRef();\n\n  const [bounds, setBounds] = useState(false);\n  let history = useHistory();\n  // Get id of trip from route\n  let { id } = useParams();\n\n  //set temporary default cetner at Upset Rapid\n  const c = [36.355308, -112.695433];\n\n  //calcualte distance of polyline\n  const getDistance = (locs) => {\n    let distance = 0;\n    for (let i = 0; i < locs.length - 1; i++) {\n      distance += locs[i].distanceTo(locs[i + 1]);\n    }\n    return distance;\n  };\n\n  //update the backend and state on confirmation of leg created\n  const _onCreate = (e) => {\n    console.log(e);\n    // onShapeDrawn(e);\n    const { layerType, layer } = e;\n    if (layerType === \"marker\") {\n    }\n    if (layerType === \"polyline\") {\n      // calculate distance of polyline\n      const distance = getDistance(layer.getLatLngs());\n      // Add new leg to db and to state\n      addLeg(id, {\n        sport: \"Hike\",\n        latlngs: layer.getLatLngs(),\n        distance,\n      });\n      //remove the layer from the drawn functional group it will be rerendered from state to allow fo identical access controls for all paaths newly created and laoded in\n      const fg = editRef.current.leafletElement.options.edit.featureGroup;\n      fg.removeLayer(fg._layers[e.layer._leaflet_id]);\n    }\n  };\n\n  ////update the backend and state on confirmation of leg edited\n  const _onEdit = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n    Object.values(_layers).forEach((layer) => {\n      // get the id of the leg beign edited\n      const id = layer.options.legId;\n      //get the distances between each point\n      const distance = getDistance(layer.getLatLngs());\n      //update track in the backend and re-render the updated trip\n      editLeg(id, layer._latlngs, distance);\n    });\n  };\n\n  //update the backend and state on confirmation of leg deleted\n  const _onDelete = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n    Object.values(_layers).forEach((layer) => {\n      //get the id of the leg being deleted\n      const id = layer.options.legId;\n      //Update the database and state with delete leg\n      deleteLeg(id);\n    });\n  };\n\n  // fly map to current lcoation and add circle showing accuracy of location\n  const handleOnLocationFound = (e) => {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    const latlng = e.latlng;\n    centerRef.current = latlng;\n    map.flyTo(latlng, 14, { duration: 2 });\n    const radius = e.accuracy;\n    const circle = L.circle(latlng, radius);\n    circle.addTo(map);\n  };\n\n  const getMapLoc = async (map) => {\n    await map.locate();\n  };\n\n  const toggleEdit = (e) => {\n    // Dont open the edit pane if the delete button is currently selected\n    if (\n      editRef.current.leafletElement._toolbars.edit._modes.remove.handler.enabled()\n    )\n      return;\n    const leg = trip.legs.find((leg) => leg.id === e.target.options.legId);\n    openPane(leg);\n  };\n\n  //close edit pane on close button click\n  const closePane = () => {\n    togglePane();\n  };\n\n  // Reload current trip from database incase of page load\n  useEffect(() => {\n    //Prevent not logged in users form seeing the map\n    if (!user.id && !localStorage.getItem(\"userId\")) {\n      history.push(\"/login\");\n    }\n    if (trip.id && !bounds && !centerRef.current) {\n      // if a trip is loaded into state app state and componenet state has no bounds, get the bounds\n      if (trip?.locations?.length) {\n        const mapBounds = latLngBounds();\n        trip.locations.forEach((loc) => mapBounds.extend([loc.lat, loc.lng]));\n        // if there are legs to get bounds from set them in state\n        setBounds(mapBounds.pad(0.1));\n      } else if (mapRef.current) {\n        const { current = {} } = mapRef;\n        const { leafletElement: map } = current;\n        //Get current location if no legs yet and fly screen there.\n        getMapLoc(map);\n        map.on(\"locationfound\", handleOnLocationFound);\n      }\n    } else if (!trip.id) {\n      // load trip into state if it's not there yet\n      getTrip(id);\n    }\n  });\n\n  console.log(trip?.locations?.length, trip);\n  return (\n    <>\n      <SlidingPane\n        closeIcon={<p>X</p>}\n        isOpen={pane}\n        title={`Distance: ${(selectedLeg.distance / 1000).toFixed(2)} km AEG: ${\n          selectedLeg.aeg\n        } m`}\n        from=\"left\"\n        width=\"400px\"\n        className=\"pane-overlay\"\n        onRequestClose={() => closePane()}\n      >\n        <LegForm leg={selectedLeg} />\n      </SlidingPane>\n      <Map\n        id=\"mapid\"\n        className={pane ? \"map-respond\" : \"map\"}\n        ref={mapRef}\n        bounds={trip?.locations?.length && bounds}\n        // center={!trip.locations && center}\n        // center={!trip.locations && centerRef.current ? centerRef.current : c}\n        center={c}\n        zoom={13}\n        scrollWheelZoom={true}\n      >\n        <LayersControl>\n          <LayersControl.BaseLayer name=\"Street\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer checked name=\"Topo\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | map style: © <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n              url=\"http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <FeatureGroup>\n            <EditControl\n              ref={editRef}\n              position=\"topright\"\n              onCreated={_onCreate}\n              onEdited={_onEdit}\n              onDeleted={_onDelete}\n              draw={{\n                layers: true,\n                rectangle: false,\n                polyline: {\n                  shapeOptions: {\n                    color: \"red\",\n                  },\n                },\n                circle: false,\n                circlemarker: false,\n                polygon: false,\n                marker: true,\n              }}\n            />\n            {/* add in all of the existing trip legs */}\n            {trip.legs\n              ? trip.legs.map((leg) => (\n                  <TripLeg\n                    key={leg.id}\n                    id={leg.id}\n                    sport={leg.sport}\n                    toggleEdit={toggleEdit}\n                    locs={trip.locations.filter((loc) => {\n                      if (loc.leg_id === leg.id) {\n                        return [loc.lat, loc.lng];\n                      }\n                    })}\n                  />\n                ))\n              : null}\n          </FeatureGroup>\n        </LayersControl>\n      </Map>\n    </>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    trip: state.TripReducer.trip,\n    pane: state.MapReducer.pane,\n    selectedLeg: state.MapReducer.selectedLeg,\n    user: state.UserReducer.user,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  deleteLeg,\n  addLeg,\n  getTrip,\n  editLeg,\n  togglePane,\n  openPane,\n})(MapContainer);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NavBar.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/Profile.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/UserReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/types.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/UserActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditProfile.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SubmitButton.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/helpers/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Trips.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NewTripForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/constants/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/TripActions.js",["124"],"import {\n  LOAD_TRIP,\n  ALL_TRIPS,\n  INVITES,\n  UPDATE_TRIPS,\n  DELETE_TRIP,\n  SET_TRIP_ID,\n  ADD_LEG,\n  UPDATE_LEG,\n  DELETE_LEG,\n  FETCHING,\n} from \"./types\";\nimport { API } from \"../constants\";\n\n//Update a leg of the trip\nexport const updateLeg = (leg) => {\n  return { type: UPDATE_LEG, payload: leg };\n};\n\n//set up the headers\nexport const makeHeader = () => {\n  const token = localStorage.getItem(\"jwt\");\n  return {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    Authorization: `bearer ${token}`,\n  };\n};\n\n//Create a new trip with the current user being added to db as the creator\nexport const createTrip = (name, start_date, end_date, notes, collabs) => {\n  return (dispatch) => {\n    dispatch({ type: FETCHING });\n    const headers = makeHeader();\n    fetch(API + \"/trips\", {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        trip: {\n          name,\n          start_date,\n          end_date,\n          notes,\n          collabs,\n        },\n      }),\n    })\n      .then((r) => r.json())\n      .then((trip) => {\n        dispatch({ type: FETCHING });\n        dispatch({ type: SET_TRIP_ID, payload: trip.id });\n      })\n      .catch(console.log);\n  };\n};\n\n// Get all trips asociated with a user and add them to state\nexport const getTrips = () => {\n  return (dispatch) => {\n    const headers = makeHeader();\n\n    fetch(API + \"/trips\", {\n      method: \"GET\",\n      headers,\n    })\n      .then((r) => r.json())\n      .then((trips) => {\n        dispatch({ type: ALL_TRIPS, payload: trips });\n        // dispatch({ type: INVITES, payload: pending });\n      })\n      .catch(console.log);\n  };\n};\n\n//Get all trips with pendign invitiations\nexport const getInvites = () => {\n  return (dispatch) => {\n    const headers = makeHeader();\n\n    fetch(API + \"/trips\", {\n      method: \"GET\",\n      headers,\n    })\n      .then((r) => r.json())\n      .then((trips) => {\n        dispatch({ type: ALL_TRIPS, payload: trips });\n        // dispatch({ type: INVITES, payload: pending });\n      })\n      .catch(console.log);\n  };\n};\n\n//Update a trip\nexport const editTrip = (name, start_date, end_date, notes, completed, id) => {\n  return (dispatch) => {\n    dispatch({ type: FETCHING });\n    const headers = makeHeader();\n\n    fetch(API + \"/trips/\" + id, {\n      method: \"PATCH\",\n      headers,\n      body: JSON.stringify({\n        trip: {\n          name,\n          start_date,\n          end_date,\n          notes,\n          completed,\n        },\n      }),\n    })\n      .then((r) => r.json())\n      .then((trip) => {\n        dispatch({ type: FETCHING });\n        dispatch({ type: UPDATE_TRIPS, payload: trip });\n      })\n      .catch(console.log);\n  };\n};\n\n// Get a sepcific trip and load it into state\nexport const getTrip = (id) => {\n  return (dispatch) => {\n    const headers = makeHeader();\n\n    fetch(API + \"/trips/\" + id, {\n      method: \"GET\",\n      headers,\n    })\n      .then((r) => r.json())\n      .then((trip) => {\n        console.log(trip);\n        dispatch({ type: LOAD_TRIP, payload: trip });\n      })\n      .catch(console.log);\n  };\n};\n\n//Delete a leg\nexport const deleteTrip = (trip_id) => {\n  return (dispatch) => {\n    const headers = makeHeader();\n    fetch(API + \"/trips/\" + trip_id, {\n      method: \"DELETE\",\n      headers,\n    })\n      .then(dispatch({ type: DELETE_TRIP, payload: trip_id }))\n      .catch(console.log);\n  };\n};\n\n// Get all trips asociated with a user and add them to state\nexport const addLeg = (id, leg) => {\n  return (dispatch) => {\n    const headers = makeHeader();\n\n    fetch(API + \"/legs\", {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        trip_id: id,\n        sport: leg.sport,\n        locs: leg.latlngs,\n        distance: leg.distance,\n      }),\n    })\n      .then((r) => r.json())\n      .then((data) => {\n        const {\n          aeg,\n          distance,\n          id,\n          notes,\n          sport,\n          start_date,\n          end_date,\n          locations,\n        } = data;\n        const leg = { id, aeg, distance, notes, sport, start_date, end_date };\n        dispatch({ type: ADD_LEG, payload: { leg, locations } });\n      })\n      .catch(console.log);\n  };\n};\n\n// Get all trips asociated with a user and add them to state\nexport const editLeg = (leg_id, locs, distance) => {\n  return (dispatch) => {\n    const headers = makeHeader();\n\n    fetch(API + \"/legs/\" + leg_id, {\n      method: \"PATCH\",\n      headers,\n      body: JSON.stringify({\n        leg_id,\n        locs,\n        distance,\n      }),\n    })\n      .then((r) => r.json())\n      .then((data) => {\n        const { aeg, distance, id, notes, sport, locations } = data;\n        const leg = { id, aeg, distance, notes, sport };\n        dispatch({ type: UPDATE_LEG, payload: { leg, locations } });\n      })\n      .catch(console.log);\n  };\n};\n\n// Edit leg info that is not locations\nexport const editLegMeta = (leg) => {\n  return (dispatch) => {\n    dispatch({ type: FETCHING });\n    const headers = makeHeader();\n\n    fetch(API + \"/legs/meta/\" + leg.id, {\n      method: \"PATCH\",\n      headers,\n      body: JSON.stringify({\n        leg,\n      }),\n    })\n      .then((r) => r.json())\n      .then((data) => {\n        const { aeg, distance, id, notes, sport, locations } = data;\n        const leg = { id, aeg, distance, notes, sport };\n        dispatch({ type: UPDATE_LEG, payload: { leg, locations } });\n      })\n      .catch(console.log);\n  };\n};\n\n//Delete a leg\nexport const deleteLeg = (leg_id) => {\n  console.log(\"Woot\");\n  return (dispatch) => {\n    const headers = makeHeader();\n    fetch(API + \"/legs/\" + leg_id, {\n      method: \"DELETE\",\n      headers,\n    })\n      .then(dispatch({ type: DELETE_LEG, payload: leg_id }))\n      .catch(console.log);\n  };\n};\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/TripReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripDetails.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripLeg.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/LegForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/MapReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/MapActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditTripForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/DeleteAlert.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/AsyncSearchBar.js",["125"],"import React, { useState } from \"react\";\nimport AsyncSelect from \"react-select/async\";\nimport makeAnimated from \"react-select/animated\";\nimport { makeHeader } from \"../actions/TripActions\";\n\nconst AsyncSearchBar = ({ setCollabs, collabs }) => {\n  //set default query terms\n  const [query, setQuery] = useState(\"\");\n\n  //get animated components wrapper\n  const animatedComponents = makeAnimated();\n\n  const loadOptions = () => {\n    const headers = makeHeader();\n    return fetch(`http://localhost:3000/collabs?q=${query}`, {\n      method: \"GET\",\n      headers,\n    }).then((res) => res.json());\n  };\n\n  // handle input change event\n  const handleInputChange = (value) => {\n    setQuery(value);\n  };\n\n  return (\n    <>\n      <AsyncSelect\n        cacheOptions\n        value={collabs}\n        isMulti\n        components={animatedComponents}\n        getOptionLabel={(e) => e.user_name}\n        getOptionValue={(e) => e.id}\n        loadOptions={loadOptions}\n        defualtOptions\n        onInputChange={(value) => setQuery(value)}\n        onChange={(value) => setCollabs(value)}\n      />\n    </>\n  );\n};\n\nexport default AsyncSearchBar;\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":3,"column":43,"nodeType":"132","messageId":"133","endLine":3,"endColumn":49},{"ruleId":"134","severity":1,"message":"135","line":134,"column":3,"nodeType":"132","endLine":134,"endColumn":12,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":228,"column":55,"nodeType":"139","messageId":"140","endLine":228,"endColumn":57},{"ruleId":"130","severity":1,"message":"141","line":4,"column":3,"nodeType":"132","messageId":"133","endLine":4,"endColumn":10},{"ruleId":"130","severity":1,"message":"142","line":22,"column":9,"nodeType":"132","messageId":"133","endLine":22,"endColumn":26},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setBounds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user.id, trip.id, trip.locations, bounds, history, getTrip, id] as a second argument to the useEffect Hook.",["145"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'INVITES' is defined but never used.","'handleInputChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},"Add dependencies array: [user.id, trip.id, trip.locations, bounds, history, getTrip, id]",{"range":"148","text":"149"},[5077,5077],", [user.id, trip.id, trip.locations, bounds, history, getTrip, id]"]