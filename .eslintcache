[{"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/index.js":"1","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reportWebVitals.js":"2","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/App.js":"3","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SignUp.js":"4","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/index.js":"5","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Login.js":"6","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/MapContainer.js":"7","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NavBar.js":"8","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/Profile.js":"9","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/UserReducer.js":"10","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/types.js":"11","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/UserActions.js":"12","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditProfile.js":"13","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SubmitButton.js":"14","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/helpers/index.js":"15","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Trips.js":"16","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NewTripForm.js":"17","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/constants/index.js":"18","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/TripActions.js":"19","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/TripReducer.js":"20","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripDetails.js":"21","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripLeg.js":"22","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/LegForm.js":"23","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/MapReducer.js":"24","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/MapActions.js":"25","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditTripForm.js":"26","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/DeleteAlert.js":"27","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/AsyncSearchBar.js":"28","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/EleContainer.js":"29","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EleChart.js":"30"},{"size":846,"mtime":1610729416529,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1610581828347,"results":"33","hashOfConfig":"32"},{"size":1059,"mtime":1611609727503,"results":"34","hashOfConfig":"32"},{"size":4311,"mtime":1611329582935,"results":"35","hashOfConfig":"32"},{"size":244,"mtime":1611157368250,"results":"36","hashOfConfig":"32"},{"size":2822,"mtime":1611608361414,"results":"37","hashOfConfig":"32"},{"size":8760,"mtime":1611778313339,"results":"38","hashOfConfig":"32"},{"size":5320,"mtime":1611697975067,"results":"39","hashOfConfig":"32"},{"size":1778,"mtime":1611704513914,"results":"40","hashOfConfig":"32"},{"size":651,"mtime":1611266161280,"results":"41","hashOfConfig":"32"},{"size":772,"mtime":1611622478376,"results":"42","hashOfConfig":"32"},{"size":2954,"mtime":1611265849064,"results":"43","hashOfConfig":"32"},{"size":4842,"mtime":1611619084975,"results":"44","hashOfConfig":"32"},{"size":732,"mtime":1610754962437,"results":"45","hashOfConfig":"32"},{"size":667,"mtime":1610849104924,"results":"46","hashOfConfig":"32"},{"size":5141,"mtime":1611693202769,"results":"47","hashOfConfig":"32"},{"size":3522,"mtime":1611357705299,"results":"48","hashOfConfig":"32"},{"size":212,"mtime":1611119002849,"results":"49","hashOfConfig":"32"},{"size":6510,"mtime":1611698109393,"results":"50","hashOfConfig":"32"},{"size":3247,"mtime":1611622634672,"results":"51","hashOfConfig":"32"},{"size":5435,"mtime":1611695786145,"results":"52","hashOfConfig":"32"},{"size":506,"mtime":1611428032858,"results":"53","hashOfConfig":"32"},{"size":3331,"mtime":1611257558524,"results":"54","hashOfConfig":"32"},{"size":455,"mtime":1611158213116,"results":"55","hashOfConfig":"32"},{"size":257,"mtime":1611158377998,"results":"56","hashOfConfig":"32"},{"size":3968,"mtime":1611611343824,"results":"57","hashOfConfig":"32"},{"size":696,"mtime":1611443323328,"results":"58","hashOfConfig":"32"},{"size":1052,"mtime":1611598921796,"results":"59","hashOfConfig":"32"},{"size":3022,"mtime":1611775092335,"results":"60","hashOfConfig":"32"},{"size":4076,"mtime":1611775152465,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"13aw72n",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"64"},"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/index.js",[],["131","132"],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reportWebVitals.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/App.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SignUp.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Login.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/MapContainer.js",["133","134"],"import React, { useRef, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport L, { latLngBounds } from \"leaflet\";\nimport { TileLayer, Map, FeatureGroup, LayersControl } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport { addLeg, getTrip, editLeg, deleteLeg } from \"../actions/TripActions\";\nimport { togglePane, openPane } from \"../actions/MapActions\";\nimport TripLeg from \"../components/TripLeg\";\nimport LegForm from \"../components/LegForm\";\nimport EleContainer from \"./EleContainer\";\n\nconst MapContainer = ({\n  trip,\n  pane,\n  selectedLeg,\n  user,\n  addLeg,\n  getTrip,\n  editLeg,\n  deleteLeg,\n  togglePane,\n  openPane,\n}) => {\n  // initialize ref to edit controls\n  const editRef = useRef();\n  const mapRef = useRef();\n  const centerRef = useRef();\n  const blipRef = useRef();\n\n  const [bounds, setBounds] = useState(false);\n  const [blip, setBlip] = useState({\n    lat: 37.86307938367891,\n    lng: -107.56290413439275,\n  });\n  let history = useHistory();\n  // Get id of trip from route\n  let { id } = useParams();\n\n  //set temporary default center at Upset Rapid\n  const c = [36.355308, -112.695433];\n\n  //calcualte distance of polyline\n  const getDistance = (locs) => {\n    let distance = 0;\n    for (let i = 0; i < locs.length - 1; i++) {\n      distance += locs[i].distanceTo(locs[i + 1]);\n    }\n    return distance;\n  };\n\n  //update the backend and state on confirmation of leg created\n  const _onCreate = (e) => {\n    console.log(e);\n    // onShapeDrawn(e);\n    const { layerType, layer } = e;\n    if (layerType === \"marker\") {\n    }\n    if (layerType === \"polyline\") {\n      // calculate distance of polyline\n      const distance = getDistance(layer.getLatLngs());\n      // Add new leg to db and to state\n      addLeg(id, {\n        sport: \"Hike\",\n        latlngs: layer.getLatLngs(),\n        distance,\n      });\n      //remove the layer from the drawn functional group it will be rerendered from state to allow fo identical access controls for all paaths newly created and laoded in\n      const fg = editRef.current.leafletElement.options.edit.featureGroup;\n      fg.removeLayer(fg._layers[e.layer._leaflet_id]);\n    }\n  };\n\n  ////update the backend and state on confirmation of leg edited\n  const _onEdit = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n    Object.values(_layers).forEach((layer) => {\n      // get the id of the leg beign edited\n      const id = layer.options.legId;\n      //get the distances between each point\n      const distance = getDistance(layer.getLatLngs());\n      //update track in the backend and re-render the updated trip\n      editLeg(id, layer._latlngs, distance);\n    });\n  };\n\n  //update the backend and state on confirmation of leg deleted\n  const _onDelete = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n    Object.values(_layers).forEach((layer) => {\n      //get the id of the leg being deleted\n      const id = layer.options.legId;\n      //Update the database and state with delete leg\n      deleteLeg(id);\n    });\n  };\n\n  // fly map to current lcoation and add circle showing accuracy of location\n  const handleOnLocationFound = (e) => {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    const latlng = e.latlng;\n    centerRef.current = latlng;\n    map.flyTo(latlng, 14, { duration: 2 });\n    const radius = e.accuracy;\n    const circle = L.circle(latlng, radius);\n    circle.addTo(map);\n  };\n\n  const getMapLoc = async (map) => {\n    await map.locate();\n  };\n\n  const toggleEdit = (e) => {\n    // Dont open the edit pane if the delete button is currently selected\n    if (\n      editRef.current.leafletElement._toolbars.edit._modes.remove.handler.enabled()\n    )\n      return;\n    const leg = trip.legs.find((leg) => leg.id === e.target.options.legId);\n    openPane(leg);\n  };\n\n  //close edit pane on close button click\n  const closePane = () => {\n    togglePane();\n  };\n\n  // Reload current trip from database incase of page load\n  useEffect(() => {\n    if (blip) {\n      const { current = {} } = mapRef;\n      const { leafletElement: map } = current;\n      if (blipRef.current) map.removeLayer(blipRef.current);\n      blipRef.current = L.circle(blip, {\n        radius: 150,\n        fillOpacity: 1,\n      });\n      blipRef.current.addTo(map);\n    }\n    //Prevent not logged in users form seeing the map\n    if (!user.id && !localStorage.getItem(\"userId\")) {\n      history.push(\"/login\");\n    }\n    if (trip.id && !bounds && !centerRef.current) {\n      // if a trip is loaded into app state and component state has no bounds, get the bounds\n      if (trip?.locations?.length) {\n        const mapBounds = latLngBounds();\n        trip.locations.forEach((loc) => mapBounds.extend([loc.lat, loc.lng]));\n        // if there are legs to get bounds from set them in state\n        setBounds(mapBounds.pad(0.1));\n      } else if (mapRef.current) {\n        const { current = {} } = mapRef;\n        const { leafletElement: map } = current;\n        //Get current location if no legs yet and fly screen there.\n        getMapLoc(map);\n        map.on(\"locationfound\", handleOnLocationFound);\n      }\n    } else if (!trip.id) {\n      // load trip into state if it's not there yet\n      getTrip(id);\n    }\n  });\n  return (\n    <>\n      <SlidingPane\n        closeIcon={<p>X</p>}\n        isOpen={pane}\n        title={`Distance: ${(selectedLeg.distance / 1000).toFixed(2)} km AEG: ${\n          selectedLeg.aeg\n        } m`}\n        from=\"left\"\n        width=\"400px\"\n        className=\"pane-overlay\"\n        onRequestClose={() => closePane()}\n      >\n        <LegForm leg={selectedLeg} />\n      </SlidingPane>\n      <Map\n        id=\"mapid\"\n        className={pane ? \"map-respond\" : \"map\"}\n        ref={mapRef}\n        bounds={trip?.locations?.length && bounds}\n        center={c}\n        zoom={13}\n        scrollWheelZoom={true}\n      >\n        <LayersControl>\n          <LayersControl.BaseLayer name=\"Street\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer checked name=\"Topo\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | map style: © <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n              url=\"http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <FeatureGroup>\n            <EditControl\n              ref={editRef}\n              position=\"topright\"\n              onCreated={_onCreate}\n              onEdited={_onEdit}\n              onDeleted={_onDelete}\n              draw={{\n                layers: true,\n                rectangle: false,\n                polyline: {\n                  shapeOptions: {\n                    color: \"red\",\n                  },\n                },\n                circle: {\n                  className: \"Circle\",\n                },\n                circlemarker: false,\n                polygon: false,\n                marker: true,\n              }}\n            />\n            {/* add in all of the existing trip legs */}\n            {trip.legs\n              ? trip.legs.map((leg) => (\n                  <TripLeg\n                    key={leg.id}\n                    id={leg.id}\n                    sport={leg.sport}\n                    toggleEdit={toggleEdit}\n                    locs={trip.locations.filter((loc) => {\n                      if (loc.leg_id === leg.id) {\n                        return [loc.lat, loc.lng];\n                      }\n                    })}\n                  />\n                ))\n              : null}\n            <button onClick={() => console.log(\"CLICK@\")}>Click me!</button>\n          </FeatureGroup>\n        </LayersControl>\n      </Map>\n      {trip.id ? <EleContainer map={mapRef} setBlip={setBlip} /> : null}\n    </>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    trip: state.TripReducer.trip,\n    pane: state.MapReducer.pane,\n    selectedLeg: state.MapReducer.selectedLeg,\n    user: state.UserReducer.user,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  deleteLeg,\n  addLeg,\n  getTrip,\n  editLeg,\n  togglePane,\n  openPane,\n})(MapContainer);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NavBar.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/Profile.js",["135"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport EleContainer from \"./EleContainer\";\nimport Trips from \"../components/Trips\";\nimport { signedIn } from \"../actions/UserActions\";\nimport { getInvites, getTrips } from \"../actions/TripActions\";\n\nconst Profile = ({\n  user,\n  fetched,\n  allTrips,\n  signedIn,\n  getTrips,\n  getInvites,\n}) => {\n  let history = useHistory();\n  let location = useLocation();\n\n  useEffect(() => {\n    //No user signd in but session in local storage sign user in\n    if (!user.id && localStorage.getItem(\"userId\")) {\n      signedIn({\n        id: localStorage.getItem(\"userId\"),\n        username: localStorage.getItem(\"username\"),\n      });\n      // Load all the user's trips into state\n      if (!fetched) {\n        getTrips();\n        getInvites();\n      }\n      //no user or session rdirect to login page\n    } else if (!user.id && !localStorage.getItem(\"userId\")) {\n      history.push(\"/login\");\n    } else if (!fetched) {\n      // Load all the user's trips into state\n      getTrips();\n      getInvites();\n    }\n  });\n  return (\n    <Container>\n      <Row>\n        <h1 className=\"d-flex align-items-center justify-content-center\">\n          {location.pathname === \"/profile\" ? \"My Trips\" : \"My Invitations\"}\n        </h1>\n      </Row>\n      <Row>\n        <Col>\n          <Trips />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.UserReducer.user,\n    allTrips: state.TripReducer.allTrips,\n    fetched: state.TripReducer.fetched,\n  };\n};\n\nexport default connect(mapStateToProps, { signedIn, getTrips, getInvites })(\n  Profile\n);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/UserReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/types.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/UserActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditProfile.js",["136"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Col, Row, Container, Form, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  signedIn,\n  editUser,\n  failedAuth,\n  handleLogOut,\n} from \"../actions/UserActions\";\nimport SubmitButton from \"./SubmitButton\";\nimport DeleteAlert from \"../components/DeleteAlert\";\nimport canyon from \"../images/grand-canyon.JPG\";\n\nconst EditProfile = ({ user, editUser, failedAuth, error, handleLogOut }) => {\n  const [username, setUsername] = useState(user.username);\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [show, setShow] = useState(false);\n  let history = useHistory();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password === passwordConfirmation) {\n      const id = user.id;\n      editUser(id, username, password);\n    } else {\n      failedAuth(\"Passords must match!\");\n    }\n  };\n\n  const deleteClicked = () => {\n    setShow(true);\n  };\n\n  const handleDelete = () => {\n    const id = user.id;\n    const token = localStorage.getItem(\"jwt\");\n    fetch(`http://localhost:3000/users/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `bearer ${token}`,\n      },\n    }).then(() => {\n      localStorage.clear();\n      handleLogOut();\n      history.push(\"/\");\n    });\n  };\n\n  // if useState got set before redux state was loaded in set the suer naem to auto fill the form\n  useEffect(() => {\n    if (!user.id && !localStorage.getItem(\"userId\")) {\n      history.push(\"/login\");\n    } else if (user.id && !username) {\n      setUsername(user.username);\n    }\n  });\n  const inputClass = error ? \"is-invalid\" : \"\";\n  return (\n    <section>\n      <Container className=\"min-vh-100\">\n        <DeleteAlert\n          show={show}\n          item={\"profile\"}\n          deleteAction={handleDelete}\n          closeAction={setShow}\n        />\n        <Row className=\" min-vh-100\">\n          <Col\n            id=\"login\"\n            md={{ span: 6, offset: 0 }}\n            style={{ marginTop: \"40px\" }}\n          >\n            {\" \"}\n            <Card>\n              <Card.Img src={canyon} alt=\"Grand Canyon\" />\n            </Card>{\" \"}\n          </Col>\n          <Col md={{ span: 4, offset: 1 }} style={{ marginTop: \"40px\" }}>\n            <Card>\n              <Card.Body>\n                <Form onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"formBasicUsername\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"text\"\n                      name=\"username\"\n                      placeholder=\"UserName\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label className=\"form-label\">New Password</Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"password\"\n                      name=\"Password\"\n                      placeholder=\"New Password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"formBasicPasswordConfirmation\">\n                    <Form.Label className=\"form-label\">\n                      Confirm New Password\n                    </Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"password\"\n                      name=\"passwordConfirmation\"\n                      placeholder=\"Password\"\n                      value={passwordConfirmation}\n                      onChange={(e) => setPasswordConfirmation(e.target.value)}\n                    />\n                    <div className=\"invalid-feedback\">{error}</div>\n                  </Form.Group>\n\n                  <SubmitButton btnTxt={\"Update Profile\"} />\n                  <Button\n                    variant=\"outline-danger form-btn\"\n                    type=\"button\"\n                    onClick={deleteClicked}\n                  >\n                    Delete Account\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    user: state.UserReducer.user,\n    fetching: state.UserReducer.fetching,\n    error: state.UserReducer.error,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signedIn,\n  editUser,\n  failedAuth,\n  handleLogOut,\n})(EditProfile);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SubmitButton.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/helpers/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Trips.js",["137"],"import React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Tab, ListGroup, Col, Row } from \"react-bootstrap\";\nimport NewTripForm from \"./NewTripForm\";\nimport EditTripForm from \"./EditTripForm\";\nimport TripDetails from \"./TripDetails\";\n\n//Render a list of alll a users trips with a pop up tab to show trip details\nconst Trips = ({ allTrips, invites }) => {\n  const formRef = useRef();\n  const newRef = useRef();\n  const [selectedTrip, setSelectedTrip] = useState(false);\n  const [displayId, setDisplayId] = useState(null);\n\n  let location = useLocation();\n  let history = useHistory();\n  // set trips based on if we are on the profile page or the invitioans page\n  let trips = location.pathname === \"/profile\" ? allTrips : invites;\n\n  //open Edit Form\n  const triggerForm = (trip) => {\n    formRef.current.setAttribute(\"aria-hidden\", false);\n    formRef.current.className = \"fade tab-pane active show\";\n    setSelectedTrip(trip);\n  };\n  //Close Edit Form\n  const closeEdit = (id) => {\n    //set the id of the currently displayed trip\n    if (formRef.current.getAttribute(\"aria-hidden\")) {\n      formRef.current.setAttribute(\"aria-hidden\", true);\n      formRef.current.className = \"fade tab-pane\";\n    }\n  };\n\n  //close the new trip form\n  const closeNew = () => {\n    const id = location.hash.slice(1);\n    // closePane(id);\n    if (newRef.current.getAttribute(\"aria-hidden\")) {\n      newRef.current.setAttribute(\"aria-hidden\", true);\n      newRef.current.className = \"fade tab-pane\";\n    }\n  };\n\n  //close current pane\n  const closePane = (id) => {\n    console.log(\"close\", id);\n    const curPane = document.getElementById(`list-group-trips-tabpane-#${id}`);\n    if (!curPane) return;\n    curPane.setAttribute(\"aria-hidden\", true);\n    curPane.className = \"fade tab-pane\";\n  };\n\n  // open trip detail\n  const openDetail = (id) => {\n    // just incase also close the edit form\n    closeEdit();\n    closeNew();\n    closePane(prevDisplay);\n    // set this id as the next value for previous display\n    setDisplayId(id);\n    const curPane = document.getElementById(`list-group-trips-tabpane-#${id}`);\n    curPane.setAttribute(\"aria-hidden\", false);\n    curPane.className = \"fade tab-pane active show\";\n  };\n\n  //Record previous values\n  const usePrevious = (value) => {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  };\n\n  //record currently open display window to be closed when the next one is clicked\n  const prevDisplay = usePrevious(displayId);\n  useEffect(() => {\n    // check if we have been directed here from the invites link and if so get the has value and open the correspodnign trip detail\n    if (location?.pathname === \"/invites\" && location?.hash.length) {\n      // Get selected invite id\n      const id = location.hash.slice(1);\n      invites.find((i) => i.id === +id)\n        ? openDetail(id)\n        : history.push(\"/invites\");\n    }\n  });\n\n  return (\n    <div>\n      <Tab.Container id=\"list-group-trips\" defaultActiveKey=\"#link1\">\n        <Row>\n          <Col sm={4}>\n            <ListGroup className=\"trip-list\">\n              {location.pathname === \"/profile\" ? (\n                <ListGroup.Item action href=\"#newTrip\">\n                  New Trip\n                </ListGroup.Item>\n              ) : null}\n              {trips.length ? (\n                trips.map((trip) => {\n                  return (\n                    <ListGroup.Item\n                      action\n                      key={trip.id}\n                      href={`#${trip.id}`}\n                      onClick={() => closeEdit(trip.id)}\n                    >\n                      {\" \"}\n                      {trip.name}\n                    </ListGroup.Item>\n                  );\n                })\n              ) : (\n                <ListGroup.Item>\n                  {`You don't have any ${\n                    location.pathname === \"invitations\"\n                      ? \"invitations \"\n                      : \"trips \"\n                  }right now.`}\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n          </Col>\n          <Col sm={8}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"#newTrip\" ref={newRef}>\n                <NewTripForm />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"#editTrip\" ref={formRef}>\n                {selectedTrip ? (\n                  <EditTripForm trip={selectedTrip} closeEdit={closeEdit} />\n                ) : null}\n              </Tab.Pane>\n              {trips.map((trip) => {\n                return (\n                  <Tab.Pane key={trip.id} eventKey={`#${trip.id}`}>\n                    <TripDetails trip={trip} edit={triggerForm} />\n                  </Tab.Pane>\n                );\n              })}\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    allTrips: state.TripReducer.allTrips,\n    invites: state.TripReducer.invites,\n  };\n};\n\nexport default connect(mapStateToProps)(Trips);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NewTripForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/constants/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/TripActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/TripReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripDetails.js",["138"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport pluralize from \"pluralize\";\nimport { Link } from \"react-router-dom\";\nimport { Button, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport {\n  deleteTrip,\n  acceptInvitation,\n  declineInvitation,\n} from \"../actions/TripActions\";\nimport SubmitButton from \"./SubmitButton\";\nimport DeleteAlert from \"./DeleteAlert\";\n\nconst TripDetails = ({\n  trip,\n  edit,\n  deleteTrip,\n  acceptInvitation,\n  declineInvitation,\n}) => {\n  const [show, setShow] = useState(false);\n  const location = useLocation();\n\n  const { name, start_date, end_date, completed, id, legs, notes } = trip;\n  const distance = legs.reduce((accum, { distance }) => accum + distance, 0);\n  const aeg = legs.reduce((accum, { aeg }) => accum + aeg, 0);\n\n  //close this pane and open the edit form\n  const handleEdit = () => {\n    edit(trip);\n  };\n\n  //Open Alert\n  const deleteClicked = () => {\n    setShow(true);\n  };\n\n  //Delete trip_id\n  const handleDelete = () => {\n    deleteTrip(trip.id);\n  };\n\n  //Accept trip invitation\n  const handleAccept = () => {\n    acceptInvitation(trip.id);\n  };\n\n  //Decline trip invitation\n  const handleDecline = () => {\n    declineInvitation(trip.id);\n  };\n\n  //make datetime objects\n  const makeDate = (date) => {\n    //   convert UTC date strings to localtime dates and get trip duration\n    return new Date(date);\n  };\n\n  // formate date strings as date objects\n  const formatDate = (date) => {\n    return Intl.DateTimeFormat(\"en-US\").format(date);\n  };\n\n  //Set dates up to be presented nicely with number of days\n  const presentDates = (start, end) => {\n    start = makeDate(start);\n    end = makeDate(end);\n    // get trip duration add 1 to account for the first day\n    const duration = (end - start) / 1000 / 3600 / 24 + 1;\n    return (\n      <h6 className=\"tab\">\n        {pluralize(\"day\", duration, true)} ({formatDate(start)} -{\" \"}\n        {formatDate(end)} )\n      </h6>\n    );\n  };\n\n  // Figure our the username of the trip creator\n  const created = () => {\n    if (!trip.id) return \"\";\n    //get user_trip of creator\n    const created = trip.user_trips.find((t) => t.created === true);\n    //get user that created\n    const user = trip.users.find((u) => u.id === created.user_id);\n    return user.user_name;\n  };\n\n  const collaborators = (creator) => {\n    //keep the creator out of the collaborators list\n    const users = trip.users.filter((u) => u.user_name !== creator);\n    return users.map((u, i) => {\n      return i === users.length - 1 ? `${u.user_name}` : `${u.user_name}, `;\n    });\n  };\n\n  const creator = created();\n  const collabs = collaborators(creator);\n  return (\n    <div>\n      <DeleteAlert\n        show={show}\n        item={\"Trip\"}\n        deleteAction={handleDelete}\n        closeAction={setShow}\n      />\n      <ListGroup>\n        <ListGroup.Item>\n          <h3>{name}</h3>\n          <h5>Created By: {creator} </h5>\n          {collabs.length ? (\n            <h6 className=\"tab\">Collaborators: {collabs} </h6>\n          ) : null}\n          {/* Convert start and end to simple dd/mm/yy format */}\n          {presentDates(start_date, end_date)}\n          <h6 className=\"tab\">{`Distance: ${(distance / 1000).toFixed(\n            2\n          )} kilometers`}</h6>\n          <h6 className=\"tab\">{`Accumulated Elevation Gain: ${aeg.toFixed(\n            2\n          )} meters`}</h6>\n          <p>{notes}</p>\n          {location.pathname === \"/profile\" ? (\n            <>\n              <Link to={`/trip/${id}`}>\n                <SubmitButton btnTxt={\"Map\"} />\n              </Link>\n              <Button\n                className=\"form-btn\"\n                variant=\"outline-success\"\n                href=\"#editTrip\"\n                onClick={handleEdit}\n              >\n                Edit\n              </Button>\n              <Button\n                className=\"form-btn\"\n                variant=\"outline-danger\"\n                onClick={deleteClicked}\n              >\n                Delete\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button\n                className=\"form-btn\"\n                variant=\"outline-success\"\n                onClick={handleAccept}\n              >\n                Accept\n              </Button>\n              <Button\n                className=\"form-btn\"\n                variant=\"outline-danger\"\n                onClick={handleDecline}\n              >\n                Decline\n              </Button>\n            </>\n          )}\n          {completed ? <h6>Trip Complete! Nice work!</h6> : null}\n        </ListGroup.Item>\n        {legs\n          .sort((a, b) => formatDate(a.date) - formatDate(a.date))\n          .map((leg) => {\n            return (\n              <ListGroup.Item key={leg.id}>\n                <h5>{leg.sport}</h5>\n                {presentDates(leg.start_date, leg.end_date)}\n                <h6 className=\"tab\">{`Distance: ${(leg.distance / 1000).toFixed(\n                  2\n                )} kilometers`}</h6>\n                <h6 className=\"tab\">{`Accumulated Elevation Gain: ${leg.aeg.toFixed(\n                  2\n                )} meters`}</h6>\n                <p>{leg.notes}</p>\n              </ListGroup.Item>\n            );\n          })}\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default connect(null, {\n  deleteTrip,\n  acceptInvitation,\n  declineInvitation,\n})(TripDetails);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripLeg.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/LegForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/MapReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/MapActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditTripForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/DeleteAlert.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/AsyncSearchBar.js",[],["139","140"],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/EleContainer.js",["141","142","143","144","145","146"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport EleChart from \"../components/EleChart\";\n\nfunction EleContainer({ map, trip, setBlip }) {\n  //   useEffect(() => {\n  //     const chartData = getData();\n  //   });\n\n  const getData = () => {\n    let data = [];\n    let loc, locs, legId, leg, distance, ele;\n    const layers = map.current.leafletElement._layers;\n    //itereate through all map layers\n    for (const layer in layers) {\n      //reset distance array for each layer\n      distance = [];\n      //only move forward with map layers that have location data\n      if (layers[layer].getLatLngs) {\n        locs = layers[layer].getLatLngs();\n        // get the locations for each layer and find the leg it's associated with.\n        legId = trip.locations.find(\n          (loc) => locs[0].lat === loc.lat && locs[0].lng === loc.lng\n        ).leg_id;\n        // get the leg associated witht eh layer to get all the metadata\n        leg = trip.legs.find((l) => l.id === legId);\n        ele = trip.locations.filter((loc) => loc.leg_id === leg.id);\n        leg.elevations = ele;\n        data.push({ leg, locs });\n      }\n    }\n    // sort the data by leg start date\n    data.sort((a, b) => a.leg.start_date - b.leg.start_date);\n    return getDistance(data);\n  };\n\n  const getDistance = (data) => {\n    let chartData = [];\n    for (let i = 0; i < data.length; i++) {\n      let curr = data[i];\n      for (let j = 0; j < curr.locs.length; j++) {\n        let ele = curr.leg.elevations[j].ele;\n        let distance;\n        // get the distance between each data point\n        if (i === 0 && j === 0) {\n          // first loc of a trip distance  is 0\n          distance = 0;\n        } else if (j === 0) {\n          // first loc of leg that is not the first leg is distance form that point to the last point of the previous leg\n          distance = curr.locs[j].distanceTo(\n            data[i - 1].locs[data[i - 1].locs.length - 1]\n          );\n          distance =\n            +(distance / 1000).toFixed(2) +\n            chartData[chartData.length - 1].label;\n        } else {\n          distance = curr.locs[j].distanceTo(curr.locs[j - 1]);\n\n          distance =\n            +(distance / 1000).toFixed(2) +\n            chartData[chartData.length - 1].label;\n        }\n        // convert distance to km and convert each point to cummulitive distance froms start\n        chartData.push({\n          label: distance,\n          value: ele,\n          tooltipContent: `<b>Distance: </b>${distance} km<br><b>Elevation: </b>${ele} m`,\n          locs: curr.locs[j],\n        });\n      }\n    }\n\n    return chartData;\n  };\n\n  // send our data to a function to render the chart\n  const chartData = getData();\n  console.log(chartData);\n  return (\n    <div className=\"ele\">\n      {chartData?.length ? (\n        <EleChart data={chartData} setBlip={setBlip} width={400} height={300} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default connect((state) => ({ trip: state.TripReducer.trip }))(\n  EleContainer\n);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EleChart.js",["147"],"import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { Card } from \"react-bootstrap\";\n\nconst EleChart = ({ data, width, height, setBlip }) => {\n  useEffect(() => {\n    drawChart();\n  }, [data]);\n\n  function drawChart() {\n    // remove previous graphs and tooltips before drawing a new one\n    d3.select(\"#container\").select(\"svg\").remove();\n    d3.select(\"#container\").select(\".tooltip\").remove();\n    //Get chart bounds\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 };\n    const yMinValue = d3.min(data, (d) => d.value);\n    const yMaxValue = d3.max(data, (d) => d.value);\n    const xMinValue = d3.min(data, (d) => d.label);\n    const xMaxValue = d3.max(data, (d) => d.label);\n\n    //add the SVG and tooltip elements\n    const svg = d3\n      .select(\"#container\")\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Add tooltip\n    // const tooltip = d3\n    //   .select(\"#container\")\n    //   .append(\"div\")\n    //   .attr(\"class\", \"tooltip\");\n\n    // set x scale\n    const xScale = d3\n      .scaleLinear()\n      .domain([xMinValue, xMaxValue])\n      .range([0, width]);\n\n    //set y scale\n    const yScale = d3\n      .scaleLinear()\n      .range([height, 0])\n      .domain([yMinValue, yMaxValue]);\n\n    // set line scale\n    const area = d3\n      .area()\n      .x((d) => xScale(d.label))\n      .y0(yScale(yScale.domain()[0]))\n      .y1((d) => yScale(d.value))\n      .curve(d3.curveMonotoneX);\n\n    // draw Y Grid\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"grid\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(d3.axisBottom(xScale).tickSize(-height).tickFormat(\"\"));\n    //   draw X Grid\n    // svg\n    //   .append(\"g\")\n    //   .attr(\"class\", \"grid\")\n    //   .call(d3.axisLeft(yScale).tickSize(-width).tickFormat(\"\"));\n    // draw X axis\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"x-axis\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(d3.axisBottom().scale(xScale).tickSize(15));\n    // Draw y-axis\n    svg.append(\"g\").attr(\"class\", \"y-axis\").call(d3.axisLeft(yScale));\n\n    // draw data line\n    svg\n      .append(\"path\")\n      .datum(data)\n      .attr(\"stroke\", \"#f6c3d0\")\n      .attr(\"stroke-width\", 4)\n      .attr(\"class\", \"area\")\n      .attr(\"fill\", \"steelblue\")\n      .attr(\"d\", area);\n\n    //if the line is focused on add the tooltip\n    const focus = svg\n      .append(\"g\")\n      .attr(\"class\", \"focus\")\n      .style(\"display\", \"none\");\n    focus.append(\"circle\").attr(\"r\", 5).attr(\"class\", \"circle\");\n\n    // add the tooltip\n    const tooltip = d3\n      .select(\"#container\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    // establish a rect over the chart to track mouse over events\n    svg\n      .append(\"rect\")\n      .attr(\"class\", \"overlay\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"opacity\", 0)\n      .on(\"mouseover\", () => {\n        focus.style(\"display\", null);\n      })\n      .on(\"mouseout\", () => {\n        tooltip.transition().duration(300).style(\"opacity\", 0);\n      })\n      .on(\"mousemove\", mousemove);\n\n    // handle mouse moving over the graph. Find the nearest plot point and add the marker and tooltip to that location\n    function mousemove(event) {\n      const bisect = d3.bisector((d) => d.label).left;\n      const xPos = d3.mouse(this)[0];\n      const x0 = bisect(data, xScale.invert(xPos));\n      const d0 = data[x0];\n      setBlip(d0.locs);\n      focus.attr(\n        \"transform\",\n        `translate(${xScale(d0.label)},${yScale(d0.value)})`\n      );\n      tooltip.transition().duration(300).style(\"opacity\", 0.9);\n      tooltip\n        .html(d0.tooltipContent || d0.label)\n        .style(\n          \"transform\",\n          `translate(${xScale(d0.label)}px,${yScale(d0.value) - 300}px)`\n        );\n    }\n  }\n\n  return (\n    <Card>\n      <div id=\"container\" />\n    </Card>\n  );\n};\nexport default EleChart;\n",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":140,"column":3,"nodeType":"154","endLine":140,"endColumn":12,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":242,"column":55,"nodeType":"158","messageId":"159","endLine":242,"endColumn":57},{"ruleId":"160","severity":1,"message":"161","line":5,"column":8,"nodeType":"154","messageId":"162","endLine":5,"endColumn":20},{"ruleId":"152","severity":1,"message":"163","line":52,"column":3,"nodeType":"154","endLine":52,"endColumn":12,"suggestions":"164"},{"ruleId":"160","severity":1,"message":"165","line":38,"column":11,"nodeType":"154","messageId":"162","endLine":38,"endColumn":13},{"ruleId":"160","severity":1,"message":"166","line":6,"column":29,"nodeType":"154","messageId":"162","endLine":6,"endColumn":42},{"ruleId":"148","replacedBy":"167"},{"ruleId":"150","replacedBy":"168"},{"ruleId":"160","severity":1,"message":"169","line":1,"column":17,"nodeType":"154","messageId":"162","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"170","line":12,"column":9,"nodeType":"154","messageId":"162","endLine":12,"endColumn":12},{"ruleId":"160","severity":1,"message":"171","line":17,"column":7,"nodeType":"154","messageId":"162","endLine":17,"endColumn":15},{"ruleId":"172","severity":1,"message":"173","line":23,"column":11,"nodeType":"158","messageId":"174","endLine":23,"endColumn":70},{"ruleId":"172","severity":1,"message":"175","line":26,"column":30,"nodeType":"158","messageId":"174","endLine":26,"endColumn":51},{"ruleId":"172","severity":1,"message":"176","line":27,"column":37,"nodeType":"158","messageId":"174","endLine":27,"endColumn":67},{"ruleId":"152","severity":1,"message":"177","line":8,"column":6,"nodeType":"178","endLine":8,"endColumn":12,"suggestions":"179"},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setBounds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [blip, user.id, trip.id, trip.locations, bounds, history, getTrip, id] as a second argument to the useEffect Hook.","Identifier",["182"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'EleContainer' is defined but never used.","unusedVar","React Hook useEffect contains a call to 'setUsername'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user.id, user.username, username, history] as a second argument to the useEffect Hook.",["183"],"'id' is assigned a value but never used.","'ListGroupItem' is defined but never used.",["180"],["181"],"'useEffect' is defined but never used.","'loc' is defined but never used.","'distance' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'locs', 'locs'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'legId'.","Function declared in a loop contains unsafe references to variable(s) 'leg'.","React Hook useEffect has a missing dependency: 'drawChart'. Either include it or remove the dependency array.","ArrayExpression",["184"],"no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},"Add dependencies array: [blip, user.id, trip.id, trip.locations, bounds, history, getTrip, id]",{"range":"191","text":"192"},"Add dependencies array: [user.id, user.username, username, history]",{"range":"193","text":"194"},"Update the dependencies array to be: [data, drawChart]",{"range":"195","text":"196"},[5540,5540],", [blip, user.id, trip.id, trip.locations, bounds, history, getTrip, id]",[1715,1715],", [user.id, user.username, username, history]",[208,214],"[data, drawChart]"]