[{"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/index.js":"1","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reportWebVitals.js":"2","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/App.js":"3","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SignUp.js":"4","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/index.js":"5","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Login.js":"6","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/MapContainer.js":"7","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NavBar.js":"8","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/Profile.js":"9","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/UserReducer.js":"10","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/types.js":"11","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/UserActions.js":"12","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditProfile.js":"13","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SubmitButton.js":"14","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/helpers/index.js":"15","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Trips.js":"16","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NewTripForm.js":"17","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/constants/index.js":"18","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/TripActions.js":"19","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/TripReducer.js":"20","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripDetails.js":"21","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripLeg.js":"22","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/LegForm.js":"23","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/MapReducer.js":"24","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/MapActions.js":"25","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditTripForm.js":"26","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/DeleteAlert.js":"27","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/AsyncSearchBar.js":"28","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/EleContainer.js":"29","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EleChart.js":"30"},{"size":824,"mtime":1611795337475,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1610581828347,"results":"33","hashOfConfig":"32"},{"size":1059,"mtime":1611609727503,"results":"34","hashOfConfig":"32"},{"size":4311,"mtime":1611329582935,"results":"35","hashOfConfig":"32"},{"size":244,"mtime":1611157368250,"results":"36","hashOfConfig":"32"},{"size":2822,"mtime":1611608361414,"results":"37","hashOfConfig":"32"},{"size":8693,"mtime":1611793681546,"results":"38","hashOfConfig":"32"},{"size":5669,"mtime":1611791985128,"results":"39","hashOfConfig":"32"},{"size":1735,"mtime":1611793717014,"results":"40","hashOfConfig":"32"},{"size":651,"mtime":1611266161280,"results":"41","hashOfConfig":"32"},{"size":820,"mtime":1611792108869,"results":"42","hashOfConfig":"32"},{"size":2954,"mtime":1611265849064,"results":"43","hashOfConfig":"32"},{"size":4842,"mtime":1611619084975,"results":"44","hashOfConfig":"32"},{"size":732,"mtime":1610754962437,"results":"45","hashOfConfig":"32"},{"size":667,"mtime":1610849104924,"results":"46","hashOfConfig":"32"},{"size":5141,"mtime":1611693202769,"results":"47","hashOfConfig":"32"},{"size":3522,"mtime":1611357705299,"results":"48","hashOfConfig":"32"},{"size":212,"mtime":1611119002849,"results":"49","hashOfConfig":"32"},{"size":6635,"mtime":1611792090776,"results":"50","hashOfConfig":"32"},{"size":3366,"mtime":1611792189061,"results":"51","hashOfConfig":"32"},{"size":5428,"mtime":1611793766351,"results":"52","hashOfConfig":"32"},{"size":506,"mtime":1611428032858,"results":"53","hashOfConfig":"32"},{"size":3331,"mtime":1611257558524,"results":"54","hashOfConfig":"32"},{"size":455,"mtime":1611158213116,"results":"55","hashOfConfig":"32"},{"size":257,"mtime":1611158377998,"results":"56","hashOfConfig":"32"},{"size":3968,"mtime":1611611343824,"results":"57","hashOfConfig":"32"},{"size":696,"mtime":1611443323328,"results":"58","hashOfConfig":"32"},{"size":1052,"mtime":1611598921796,"results":"59","hashOfConfig":"32"},{"size":2959,"mtime":1611793985335,"results":"60","hashOfConfig":"32"},{"size":4278,"mtime":1611796545734,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"13aw72n",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/index.js",[],["127","128"],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reportWebVitals.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/App.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SignUp.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Login.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/MapContainer.js",["129","130"],"import React, { useRef, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport L, { latLngBounds } from \"leaflet\";\nimport { TileLayer, Map, FeatureGroup, LayersControl } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport { addLeg, getTrip, editLeg, deleteLeg } from \"../actions/TripActions\";\nimport { togglePane, openPane } from \"../actions/MapActions\";\nimport TripLeg from \"../components/TripLeg\";\nimport LegForm from \"../components/LegForm\";\nimport EleContainer from \"./EleContainer\";\n\nconst MapContainer = ({\n  trip,\n  pane,\n  selectedLeg,\n  user,\n  addLeg,\n  getTrip,\n  editLeg,\n  deleteLeg,\n  togglePane,\n  openPane,\n}) => {\n  // initialize ref to edit controls\n  const editRef = useRef();\n  const mapRef = useRef();\n  const centerRef = useRef();\n  const blipRef = useRef();\n\n  const [bounds, setBounds] = useState(false);\n  const [blip, setBlip] = useState({\n    lat: 37.86307938367891,\n    lng: -107.56290413439275,\n  });\n\n  let history = useHistory();\n  // Get id of trip from route\n  let { id } = useParams();\n\n  //set temporary default center at Upset Rapid\n  const c = [36.355308, -112.695433];\n\n  //calcualte distance of polyline\n  const getDistance = (locs) => {\n    let distance = 0;\n    for (let i = 0; i < locs.length - 1; i++) {\n      distance += locs[i].distanceTo(locs[i + 1]);\n    }\n    return distance;\n  };\n\n  //update the backend and state on confirmation of leg created\n  const _onCreate = (e) => {\n    console.log(e);\n    // onShapeDrawn(e);\n    const { layerType, layer } = e;\n    if (layerType === \"circle\") {\n    }\n    if (layerType === \"polyline\") {\n      // calculate distance of polyline\n      const distance = getDistance(layer.getLatLngs());\n      // Add new leg to db and to state\n      addLeg(id, {\n        sport: \"Hike\",\n        latlngs: layer.getLatLngs(),\n        distance,\n      });\n      //remove the layer from the drawn functional group it will be rerendered from state to allow fo identical access controls for all paaths newly created and laoded in\n      const fg = editRef.current.leafletElement.options.edit.featureGroup;\n      fg.removeLayer(fg._layers[e.layer._leaflet_id]);\n    }\n  };\n\n  ////update the backend and state on confirmation of leg edited\n  const _onEdit = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n    Object.values(_layers).forEach((layer) => {\n      // get the id of the leg beign edited\n      const id = layer.options.legId;\n      //get the distances between each point\n      const distance = getDistance(layer.getLatLngs());\n      //update track in the backend and re-render the updated trip\n      editLeg(id, layer._latlngs, distance);\n    });\n  };\n\n  //update the backend and state on confirmation of leg deleted\n  const _onDelete = (e) => {\n    console.log(e);\n    const {\n      layers: { _layers },\n    } = e;\n    Object.values(_layers).forEach((layer) => {\n      //get the id of the leg being deleted\n      const id = layer.options.legId;\n      //Update the database and state with delete leg\n      deleteLeg(id);\n    });\n  };\n\n  // fly map to current lcoation and add circle showing accuracy of location\n  const handleOnLocationFound = (e) => {\n    const { current = {} } = mapRef;\n    const { leafletElement: map } = current;\n    const latlng = e.latlng;\n    centerRef.current = latlng;\n    map.flyTo(latlng, 14, { duration: 2 });\n    const radius = e.accuracy;\n    const circle = L.circle(latlng, radius);\n    circle.addTo(map);\n  };\n\n  const getMapLoc = async (map) => {\n    await map.locate();\n  };\n\n  const toggleEdit = (e) => {\n    // Dont open the edit pane if the delete button is currently selected\n    if (\n      editRef.current.leafletElement._toolbars.edit._modes.remove.handler.enabled()\n    )\n      return;\n    const leg = trip.legs.find((leg) => leg.id === e.target.options.legId);\n    openPane(leg);\n  };\n\n  //close edit pane on close button click\n  const closePane = () => {\n    togglePane();\n  };\n\n  // Reload current trip from database incase of page load\n  useEffect(() => {\n    if (blip) {\n      const { current = {} } = mapRef;\n      const { leafletElement: map } = current;\n      // add blip on map corresponding to ele profile track\n      if (blipRef.current) map.removeLayer(blipRef.current);\n      blipRef.current = L.circle(blip, {\n        radius: 150,\n        fillOpacity: 1,\n      });\n      blipRef.current.addTo(map);\n    }\n    //Prevent not logged in users form seeing the map\n    if (!user.id && !localStorage.getItem(\"userId\")) {\n      history.push(\"/login\");\n    }\n    if (trip.id && !bounds && !centerRef.current) {\n      // if a trip is loaded into app state and component state has no bounds, get the bounds\n      if (trip?.locations?.length) {\n        const mapBounds = latLngBounds();\n        trip.locations.forEach((loc) => mapBounds.extend([loc.lat, loc.lng]));\n        // if there are legs to get bounds from set them in state\n        setBounds(mapBounds.pad(0.1));\n      } else if (mapRef.current) {\n        const { current = {} } = mapRef;\n        const { leafletElement: map } = current;\n        //Get current location if no legs yet and fly screen there.\n        getMapLoc(map);\n        map.on(\"locationfound\", handleOnLocationFound);\n      }\n    } else if (!trip.id) {\n      // load trip into state if it's not there yet\n      getTrip(id);\n    }\n  });\n\n  return (\n    <>\n      <SlidingPane\n        closeIcon={<p>X</p>}\n        isOpen={pane}\n        title={`Distance: ${(selectedLeg.distance / 1000).toFixed(2)} km AEG: ${\n          selectedLeg.aeg\n        } m`}\n        from=\"left\"\n        width=\"400px\"\n        className=\"pane-overlay\"\n        onRequestClose={() => closePane()}\n      >\n        <LegForm leg={selectedLeg} />\n      </SlidingPane>\n      <Map\n        id=\"mapid\"\n        className={pane ? \"map-respond\" : \"map\"}\n        ref={mapRef}\n        bounds={trip?.locations?.length && bounds}\n        center={c}\n        zoom={13}\n        scrollWheelZoom={true}\n      >\n        <LayersControl>\n          <LayersControl.BaseLayer name=\"Street\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <LayersControl.BaseLayer checked name=\"Topo\">\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | map style: © <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n              url=\"http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png\"\n            />\n          </LayersControl.BaseLayer>\n          <FeatureGroup>\n            <EditControl\n              ref={editRef}\n              position=\"topright\"\n              onCreated={_onCreate}\n              onEdited={_onEdit}\n              onDeleted={_onDelete}\n              draw={{\n                layers: true,\n                rectangle: false,\n                polyline: {\n                  shapeOptions: {\n                    color: \"red\",\n                  },\n                },\n                circle: false,\n                circlemarker: false,\n                polygon: false,\n                marker: true,\n              }}\n            />\n\n            {/* add in all of the existing trip legs */}\n            {trip.legs\n              ? trip.legs.map((leg) => (\n                  <TripLeg\n                    key={leg.id}\n                    id={leg.id}\n                    sport={leg.sport}\n                    toggleEdit={toggleEdit}\n                    locs={trip.locations.filter((loc) => {\n                      if (loc.leg_id === leg.id) {\n                        return [loc.lat, loc.lng];\n                      }\n                    })}\n                  />\n                ))\n              : null}\n          </FeatureGroup>\n        </LayersControl>\n      </Map>\n      {trip.id ? <EleContainer map={mapRef} setBlip={setBlip} /> : null}\n    </>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    trip: state.TripReducer.trip,\n    pane: state.MapReducer.pane,\n    selectedLeg: state.MapReducer.selectedLeg,\n    user: state.UserReducer.user,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  deleteLeg,\n  addLeg,\n  getTrip,\n  editLeg,\n  togglePane,\n  openPane,\n})(MapContainer);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NavBar.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/Profile.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/UserReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/types.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/UserActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditProfile.js",["131"],"import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Col, Row, Container, Form, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  signedIn,\n  editUser,\n  failedAuth,\n  handleLogOut,\n} from \"../actions/UserActions\";\nimport SubmitButton from \"./SubmitButton\";\nimport DeleteAlert from \"../components/DeleteAlert\";\nimport canyon from \"../images/grand-canyon.JPG\";\n\nconst EditProfile = ({ user, editUser, failedAuth, error, handleLogOut }) => {\n  const [username, setUsername] = useState(user.username);\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState(\"\");\n  const [show, setShow] = useState(false);\n  let history = useHistory();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (password === passwordConfirmation) {\n      const id = user.id;\n      editUser(id, username, password);\n    } else {\n      failedAuth(\"Passords must match!\");\n    }\n  };\n\n  const deleteClicked = () => {\n    setShow(true);\n  };\n\n  const handleDelete = () => {\n    const id = user.id;\n    const token = localStorage.getItem(\"jwt\");\n    fetch(`http://localhost:3000/users/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `bearer ${token}`,\n      },\n    }).then(() => {\n      localStorage.clear();\n      handleLogOut();\n      history.push(\"/\");\n    });\n  };\n\n  // if useState got set before redux state was loaded in set the suer naem to auto fill the form\n  useEffect(() => {\n    if (!user.id && !localStorage.getItem(\"userId\")) {\n      history.push(\"/login\");\n    } else if (user.id && !username) {\n      setUsername(user.username);\n    }\n  });\n  const inputClass = error ? \"is-invalid\" : \"\";\n  return (\n    <section>\n      <Container className=\"min-vh-100\">\n        <DeleteAlert\n          show={show}\n          item={\"profile\"}\n          deleteAction={handleDelete}\n          closeAction={setShow}\n        />\n        <Row className=\" min-vh-100\">\n          <Col\n            id=\"login\"\n            md={{ span: 6, offset: 0 }}\n            style={{ marginTop: \"40px\" }}\n          >\n            {\" \"}\n            <Card>\n              <Card.Img src={canyon} alt=\"Grand Canyon\" />\n            </Card>{\" \"}\n          </Col>\n          <Col md={{ span: 4, offset: 1 }} style={{ marginTop: \"40px\" }}>\n            <Card>\n              <Card.Body>\n                <Form onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"formBasicUsername\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"text\"\n                      name=\"username\"\n                      placeholder=\"UserName\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label className=\"form-label\">New Password</Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"password\"\n                      name=\"Password\"\n                      placeholder=\"New Password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </Form.Group>\n\n                  <Form.Group controlId=\"formBasicPasswordConfirmation\">\n                    <Form.Label className=\"form-label\">\n                      Confirm New Password\n                    </Form.Label>\n                    <Form.Control\n                      className={inputClass}\n                      type=\"password\"\n                      name=\"passwordConfirmation\"\n                      placeholder=\"Password\"\n                      value={passwordConfirmation}\n                      onChange={(e) => setPasswordConfirmation(e.target.value)}\n                    />\n                    <div className=\"invalid-feedback\">{error}</div>\n                  </Form.Group>\n\n                  <SubmitButton btnTxt={\"Update Profile\"} />\n                  <Button\n                    variant=\"outline-danger form-btn\"\n                    type=\"button\"\n                    onClick={deleteClicked}\n                  >\n                    Delete Account\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    user: state.UserReducer.user,\n    fetching: state.UserReducer.fetching,\n    error: state.UserReducer.error,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signedIn,\n  editUser,\n  failedAuth,\n  handleLogOut,\n})(EditProfile);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/SubmitButton.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/helpers/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/Trips.js",["132"],"import React, { useRef, useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Tab, ListGroup, Col, Row } from \"react-bootstrap\";\nimport NewTripForm from \"./NewTripForm\";\nimport EditTripForm from \"./EditTripForm\";\nimport TripDetails from \"./TripDetails\";\n\n//Render a list of alll a users trips with a pop up tab to show trip details\nconst Trips = ({ allTrips, invites }) => {\n  const formRef = useRef();\n  const newRef = useRef();\n  const [selectedTrip, setSelectedTrip] = useState(false);\n  const [displayId, setDisplayId] = useState(null);\n\n  let location = useLocation();\n  let history = useHistory();\n  // set trips based on if we are on the profile page or the invitioans page\n  let trips = location.pathname === \"/profile\" ? allTrips : invites;\n\n  //open Edit Form\n  const triggerForm = (trip) => {\n    formRef.current.setAttribute(\"aria-hidden\", false);\n    formRef.current.className = \"fade tab-pane active show\";\n    setSelectedTrip(trip);\n  };\n  //Close Edit Form\n  const closeEdit = (id) => {\n    //set the id of the currently displayed trip\n    if (formRef.current.getAttribute(\"aria-hidden\")) {\n      formRef.current.setAttribute(\"aria-hidden\", true);\n      formRef.current.className = \"fade tab-pane\";\n    }\n  };\n\n  //close the new trip form\n  const closeNew = () => {\n    const id = location.hash.slice(1);\n    // closePane(id);\n    if (newRef.current.getAttribute(\"aria-hidden\")) {\n      newRef.current.setAttribute(\"aria-hidden\", true);\n      newRef.current.className = \"fade tab-pane\";\n    }\n  };\n\n  //close current pane\n  const closePane = (id) => {\n    console.log(\"close\", id);\n    const curPane = document.getElementById(`list-group-trips-tabpane-#${id}`);\n    if (!curPane) return;\n    curPane.setAttribute(\"aria-hidden\", true);\n    curPane.className = \"fade tab-pane\";\n  };\n\n  // open trip detail\n  const openDetail = (id) => {\n    // just incase also close the edit form\n    closeEdit();\n    closeNew();\n    closePane(prevDisplay);\n    // set this id as the next value for previous display\n    setDisplayId(id);\n    const curPane = document.getElementById(`list-group-trips-tabpane-#${id}`);\n    curPane.setAttribute(\"aria-hidden\", false);\n    curPane.className = \"fade tab-pane active show\";\n  };\n\n  //Record previous values\n  const usePrevious = (value) => {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  };\n\n  //record currently open display window to be closed when the next one is clicked\n  const prevDisplay = usePrevious(displayId);\n  useEffect(() => {\n    // check if we have been directed here from the invites link and if so get the has value and open the correspodnign trip detail\n    if (location?.pathname === \"/invites\" && location?.hash.length) {\n      // Get selected invite id\n      const id = location.hash.slice(1);\n      invites.find((i) => i.id === +id)\n        ? openDetail(id)\n        : history.push(\"/invites\");\n    }\n  });\n\n  return (\n    <div>\n      <Tab.Container id=\"list-group-trips\" defaultActiveKey=\"#link1\">\n        <Row>\n          <Col sm={4}>\n            <ListGroup className=\"trip-list\">\n              {location.pathname === \"/profile\" ? (\n                <ListGroup.Item action href=\"#newTrip\">\n                  New Trip\n                </ListGroup.Item>\n              ) : null}\n              {trips.length ? (\n                trips.map((trip) => {\n                  return (\n                    <ListGroup.Item\n                      action\n                      key={trip.id}\n                      href={`#${trip.id}`}\n                      onClick={() => closeEdit(trip.id)}\n                    >\n                      {\" \"}\n                      {trip.name}\n                    </ListGroup.Item>\n                  );\n                })\n              ) : (\n                <ListGroup.Item>\n                  {`You don't have any ${\n                    location.pathname === \"invitations\"\n                      ? \"invitations \"\n                      : \"trips \"\n                  }right now.`}\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n          </Col>\n          <Col sm={8}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"#newTrip\" ref={newRef}>\n                <NewTripForm />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"#editTrip\" ref={formRef}>\n                {selectedTrip ? (\n                  <EditTripForm trip={selectedTrip} closeEdit={closeEdit} />\n                ) : null}\n              </Tab.Pane>\n              {trips.map((trip) => {\n                return (\n                  <Tab.Pane key={trip.id} eventKey={`#${trip.id}`}>\n                    <TripDetails trip={trip} edit={triggerForm} />\n                  </Tab.Pane>\n                );\n              })}\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => {\n  return {\n    allTrips: state.TripReducer.allTrips,\n    invites: state.TripReducer.invites,\n  };\n};\n\nexport default connect(mapStateToProps)(Trips);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/NewTripForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/constants/index.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/TripActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/TripReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripDetails.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/TripLeg.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/LegForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/reducers/MapReducer.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/actions/MapActions.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EditTripForm.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/DeleteAlert.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/AsyncSearchBar.js",[],"/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/containers/EleContainer.js",["133","134","135"],"import React from \"react\";\nimport { connect } from \"react-redux\";\nimport EleChart from \"../components/EleChart\";\n\nfunction EleContainer({ map, trip, setBlip }) {\n  //   useEffect(() => {\n  //     const chartData = getData();\n  //   });\n\n  const getData = () => {\n    let data = [];\n    let locs, legId, leg, ele;\n    const layers = map.current.leafletElement._layers;\n    //itereate through all map layers\n    for (const layer in layers) {\n      //only move forward with map layers that have location data\n      if (layers[layer].getLatLngs) {\n        locs = layers[layer].getLatLngs();\n        // get the locations for each layer and find the leg it's associated with.\n        legId = trip.locations.find(\n          (loc) => locs[0].lat === loc.lat && locs[0].lng === loc.lng\n        ).leg_id;\n        // get the leg associated witht eh layer to get all the metadata\n        leg = trip.legs.find((l) => l.id === legId);\n        ele = trip.locations.filter((loc) => loc.leg_id === leg.id);\n        leg.elevations = ele;\n        data.push({ leg, locs });\n      }\n    }\n    // sort the data by leg start date\n    data.sort(\n      (a, b) => new Date(a.leg.start_date) - new Date(b.leg.start_date)\n    );\n    return getDistance(data);\n  };\n\n  const getDistance = (data) => {\n    let chartData = [];\n    for (let i = 0; i < data.length; i++) {\n      let curr = data[i];\n      for (let j = 0; j < curr.locs.length; j++) {\n        let ele = curr.leg.elevations[j].ele;\n        let distance;\n        // get the distance between each data point\n        if (i === 0 && j === 0) {\n          // first loc of a trip distance  is 0\n          distance = 0;\n        } else if (j === 0) {\n          // first loc of leg that is not the first leg is distance form that point to the last point of the previous leg\n          distance = curr.locs[j].distanceTo(\n            data[i - 1].locs[data[i - 1].locs.length - 1]\n          );\n          distance =\n            +(distance / 1000).toFixed(2) +\n            chartData[chartData.length - 1].label;\n        } else {\n          distance = curr.locs[j].distanceTo(curr.locs[j - 1]);\n\n          distance =\n            +(distance / 1000).toFixed(2) +\n            chartData[chartData.length - 1].label;\n        }\n        // convert distance to km and convert each point to cummulitive distance froms start\n        chartData.push({\n          label: distance,\n          value: ele,\n          tooltipContent: `<b>Distance: </b>${distance} km<br><b>Elevation: </b>${ele} m`,\n          locs: curr.locs[j],\n        });\n      }\n    }\n\n    return chartData;\n  };\n\n  // send our data to a function to render the chart\n  const chartData = getData();\n  console.log(chartData);\n  return (\n    <div className=\"ele\">\n      {chartData?.length ? (\n        <EleChart data={chartData} setBlip={setBlip} width={400} height={200} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default connect((state) => ({ trip: state.TripReducer.trip }))(\n  EleContainer\n);\n","/Users/williamlytle/Flatiron/code/projects/phase5/expedition-planner-frontend/src/components/EleChart.js",["136"],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":141,"column":3,"nodeType":"143","endLine":141,"endColumn":12,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":244,"column":55,"nodeType":"147","messageId":"148","endLine":244,"endColumn":57},{"ruleId":"141","severity":1,"message":"149","line":52,"column":3,"nodeType":"143","endLine":52,"endColumn":12,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":38,"column":11,"nodeType":"143","messageId":"153","endLine":38,"endColumn":13},{"ruleId":"154","severity":1,"message":"155","line":21,"column":11,"nodeType":"147","messageId":"156","endLine":21,"endColumn":70},{"ruleId":"154","severity":1,"message":"157","line":24,"column":30,"nodeType":"147","messageId":"156","endLine":24,"endColumn":51},{"ruleId":"154","severity":1,"message":"158","line":25,"column":37,"nodeType":"147","messageId":"156","endLine":25,"endColumn":67},{"ruleId":"141","severity":1,"message":"159","line":9,"column":6,"nodeType":"160","endLine":9,"endColumn":12,"suggestions":"161"},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setBounds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [blip, user.id, trip.id, trip.locations, bounds, history, getTrip, id] as a second argument to the useEffect Hook.","Identifier",["164"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect contains a call to 'setUsername'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [user.id, user.username, username, history] as a second argument to the useEffect Hook.",["165"],"no-unused-vars","'id' is assigned a value but never used.","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'locs', 'locs'.","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'legId'.","Function declared in a loop contains unsafe references to variable(s) 'leg'.","React Hook useEffect has a missing dependency: 'drawChart'. Either include it or remove the dependency array.","ArrayExpression",["166"],"no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Add dependencies array: [blip, user.id, trip.id, trip.locations, bounds, history, getTrip, id]",{"range":"173","text":"174"},"Add dependencies array: [user.id, user.username, username, history]",{"range":"175","text":"176"},"Update the dependencies array to be: [data, drawChart]",{"range":"177","text":"178"},[5601,5601],", [blip, user.id, trip.id, trip.locations, bounds, history, getTrip, id]",[1715,1715],", [user.id, user.username, username, history]",[258,264],"[data, drawChart]"]